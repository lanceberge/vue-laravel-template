name: Deploy
# Uncomment to skip tests
# on:
#   push:
#     branches:
#       - main

on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches:
      - main
env:
  REPO_NAME: REPO_NAME_PLACEHOLDER

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # comment to skip tests
    if: false # TODO
    concurrency:
      group: production-deploy
      cancel-in-progress: false
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUGGING: true
    steps:
      - uses: actions/checkout@v3

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO_NAME
          script: |
            set -e

            # Determine which port to use based on current running container
            OLD_PORT=$(grep -oP 'localhost:\K\d+' /home/ec2-user/$REPO_NAME/nginx/nginx.conf)

            cd /home/ec2-user/$REPO_NAME
            git reset --hard
            git pull --rebase

            if [ "$OLD_PORT" == "8000" ]; then
              export NEW_PORT="8001"
            else
              export NEW_PORT="8000"
            fi
            echo "Deploying to port: $NEW_PORT"

            # maintain the currently running port
            # we will update this to the new port if the health check passes
            echo $OLD_PORT > /tmp/running_port
            echo $OLD_PORT > /tmp/old_port
            echo $NEW_PORT > /tmp/new_port

            # set up the application's .env
            cp .env.prod .env

            # set up the docker-compose .env
            echo APP_PORT=$NEW_PORT > .env.docker
            echo ANTHROPIC_KEY=${{ secrets.ANTHROPIC_KEY }} >> .env.docker
            echo APP_ENV=production >> .env.docker
            echo APP_KEY=${{ secrets.APP_KEY }} >> .env.docker
            echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env.docker
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env.docker
            echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env.docker
            echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env.docker

            docker-compose -p $NEW_PORT --env-file .env.docker build --no-cache app
            docker-compose -p $NEW_PORT --env-file .env.docker up --no-deps app -d

            if ! docker ps | grep -q "postgres"; then
                docker-compose --env-file .env.docker up --no-deps db -d
            fi

            if ! docker ps | grep -q "redis"; then
                docker-compose --env-file .env.docker up --no-deps redis -d
            fi

            rm .env.docker .env

      - name: Check Container Health
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            NEW_PORT=$(cat /tmp/new_port)

            timeout=60
            healthy=1
            while [ $timeout -gt 0 ]; do
              status=$(curl -LI "http://localhost:${NEW_PORT}" -o /dev/null -w '%{http_code}\n' -s)
              if [ "$status" == "200" ]; then
                healthy=0
                break
              fi
              sleep 1
              timeout=$((timeout-1))
            done

            if [ $healthy -ne 0 ]; then
              echo "Container running at port ${NEW_PORT} was not found to be healthy"
              echo "Final health check on localhost:${NEW_PORT} shows status: $status"
              exit 1
            fi

      - name: Proxy traffic to new container with nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO_NAME
          script: |
            set -e
            NEW_PORT=$(cat /tmp/new_port)
            OLD_PORT=$(cat /tmp/old_port)

            # Update nginx config to point to new container
            sudo sed -i "s#proxy_pass http://localhost:${OLD_PORT}#proxy_pass http://localhost:${NEW_PORT}#" \
                /home/ec2-user/$REPO_NAME/nginx/nginx.conf
            sudo nginx -t
            sudo nginx -s reload

            # If the nginx test passes, update the currently running port
            echo $NEW_PORT > /tmp/running_port

      - name: Cleanup old container
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO_NAME
          script: |
            cd /home/ec2-user/$REPO_NAME

            rm -f .env.docker .env

            RUNNING_PORT=$(cat /tmp/running_port)
            if [ "$RUNNING_PORT" == "8000" ]; then
                export OTHER_PORT=8001
            else
                export OTHER_PORT=8000
            fi

            # remove the previously running container and non-running images and containers
            docker ps --format '{{.Names}}' | grep $OTHER_PORT-app | xargs -r docker rm -f
            docker builder prune -af
            docker container prune -f
            docker image prune -af

            # cleanup the running containers of the port we're not currently proxying traffic to
            rm -f /tmp/old_port /tmp/new_port /tmp/running_port
