name: Deploy
on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches:
      - main

env:
  REPO_NAME: REPO_NAME_PLACEHOLDER

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    if: false # TODO
    concurrency:
      group: production-deploy
      cancel-in-progress: false
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUGGING: true
    steps:
      - uses: actions/checkout@v3

      - name: Build Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO_NAME
          script: |
            set -e
            cd /home/ec2-user/$REPO_NAME
            git pull --rebase
            php artisan migrate --force
            docker build -t ${{ github.sha }} . --no-cache

      - name: Run Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO_NAME
          script: |
            set -e
            # Determine which port to use based on current running container
            current_port=$(docker ps | grep -oP '0.0.0.0:\K\d+' || echo "none")
            if [ "$current_port" == "8000" ]; then
              export NEW_PORT="8001"
              export OLD_PORT="8000"
            else
              export NEW_PORT="8000"
              export OLD_PORT="8001"
            fi
            echo "Deploying to port: $NEW_PORT"

            container_id=$(docker run -d \
                -p $NEW_PORT:8000 \
                -e APP_KEY=${{ secrets.APP_KEY }} \
                -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
                -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
                -v /home/ec2-user/$REPO_NAME/database/database.sqlite:/app/database/database.sqlite \
                ${{ github.sha }})

            echo "Running container: $container_id"
            echo "$NEW_PORT" > /tmp/new_port
            echo "$OLD_PORT" > /tmp/old_port

      - name: Check Container Health
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            NEW_PORT=$(cat /tmp/new_port)

            timeout=60
            healthy=1
            while [ $timeout -gt 0 ]; do
              status=$(curl -LI "http://localhost:${NEW_PORT}" -o /dev/null -w '%{http_code}\n' -s)
              if [ "$status" == "200" ]; then
                healthy=0
                break
              fi
              sleep 1
              timeout=$((timeout-1))
            done

            if [ $healthy -ne 0 ]; then
              echo "Container running at port ${NEW_PORT} was not found to be healthy"
              echo "Final health check on localhost:${NEW_PORT} shows status: $status"
              docker ps | grep ":${NEW_PORT}" | awk '{print $1}' | xargs -r docker rm -f
              exit 1
            fi

      - name: Update Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO_NAME
          script: |
            set -e
            NEW_PORT=$(cat /tmp/new_port)
            OLD_PORT=$(cat /tmp/old_port)

            # Update nginx config to point to new container
            sudo sed -i "s#proxy_pass http://localhost:${OLD_PORT}#proxy_pass http://localhost:${NEW_PORT}#g" \
                /home/ec2-user/$REPO_NAME/nginx/nginx.conf
            sudo nginx -t
            sudo nginx -s reload

      - name: Cleanup
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: REPO_NAME
          script: |
            docker system prune -a -f --volumes

            # Cleanup the other running container if it hasn't already, ex. if the nginx test fails
            RUNNING_PORT=$(grep -oP 'localhost:\K\d+' /home/ec2-user/$REPO_NAME/nginx/nginx.conf)

            if [ "$RUNNING_PORT" == "8000" ]; then
                export OTHER_PORT=8001
            else
                export OTHER_PORT=8000
            fi

            docker ps | grep ":${OTHER_PORT}" | awk '{print $1}' | xargs -r docker rm -f

            rm /tmp/old_port
            rm /tmp/new_port
